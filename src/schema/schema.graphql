input CreateUserInput {
  fullName: String!
  image: String
  username: String!
}

input UpdateUserInput {
  id: String!
  fullName: String!
  image: String
}

type User {
  id: String!
  fullName: String!
  image: String
  username: String!
}

type ActionResponse {
  success: Boolean!
}

type Brew {
  step: Int!
  waterAmount: Float!
  time: Int!
  description: String
}

input BrewInput {
  step: Int!
  waterAmount: Float!
  time: Int!
  description: String
}

input RecipeDetailInput {
  groundCoffeeAmount: Float!
  ratio: String!
  totalTime: Int!
  grindSize: Float!
  temperature: Float!
  totalYield: Float!
  steps: [BrewInput]!
}

type RecipeDetail {
  groundCoffeeAmount: Float!
  ratio: String!
  totalTime: Int!
  grindSize: Float!
  temperature: Float!
  totalYield: Float!
  steps: [Brew]!
}

input CreateRecipeInput {
  images: [String]
  createBy: String!
  title: String!
  description: String
  detail: RecipeDetailInput!
  beanDetail: BeanDetailInput!
  brewMethod: String!
}

type BeanDetail {
  process: String!
  roastLevel: String
  tasteNotes: [String]!
  origin: String
  varieties: [String]
  productUrl: String
}

input BeanDetailInput {
  process: String!
  roastLevel: String
  tasteNotes: [String]!
  origin: String
  varieties: [String]
  productUrl: String
}

input UpdateRecipeInput {
  id: String!
  images: [String]
  title: String
  description: String
  detail: RecipeDetailInput
  beanDetail: BeanDetailInput
}

input LikeRecipeInput {
  username: String!
  recipeId: String!
}

input DisLikeRecipeInput {
  username: String!
  recipeId: String!
}

type Recipe {
  id: String!
  images: [String]
  createBy: String!
  title: String!
  description: String!
  detail: RecipeDetail!
  likes: Int
  dislikes: Int
  beanDetail: BeanDetail!
}

input DeleteRecipeInput {
  username: String!
  recipeId: String!
}

type IsLike {
  like: Boolean!
}

type IsDislike {
  dislike: Boolean!
}

type Query {
  users: [User]
  user(username: String!): User
  recipes: [Recipe]
  userRecipe(username: String!): [Recipe]
  recipe(recipeId: String!): Recipe
  didLikeRecipe(checkRecipeLikeInput: LikeRecipeInput): IsLike
  didDislikeRecipe(checkRecipeDislikeInput: DisLikeRecipeInput): IsDislike
}

type Mutation {
  createUser(createUserInput: CreateUserInput): User
  updateUser(updateUserInput: UpdateUserInput): User
  deleteUser(id: String!): ActionResponse
  createRecipe(createRecipeInput: CreateRecipeInput): Recipe
  updateRecipe(updateRecipeInput: UpdateRecipeInput): Recipe
  deleteRecipe(deleteRecipeInput: DeleteRecipeInput!): ActionResponse
  likeRecipe(likeRecipeInput: LikeRecipeInput): ActionResponse
  dislikeRecipe(dislikeRecipeInput: DisLikeRecipeInput): ActionResponse
}
